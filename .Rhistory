setView(lng = -8, lat = 53, zoom = 7) %>%
addCircleMarkers(lng= ~long,
lat= ~lat,
radius = ~ncases*3)
datatable(dat)
g= dat %>%
mutate(date = as.Date(date,format = "%d/%m/%Y")) %>%
mutate_at(vars(gender), funs(as.character(.))) %>%
bind_rows(mutate(., gender = "All")) %>%
group_by(date,gender) %>%
summarise(ncases = sum(ncase)) %>%
na.omit() %>%
ggplot(aes(x=date,y=ncases,color=gender)) + geom_line() + geom_point() + theme(legend.position="none")
ggplotly(g)
g = dat %>%
mutate(date = as.Date(date,format = "%d/%m/%Y")) %>%
group_by(date) %>%
summarise(ncases = sum(ncase), New_cases = sum(ncase), Date = min(date)) %>%
na.omit() %>%
mutate(ccases = cumsum(ncases), Total_cases= cumsum(ncases)) %>%
ggplot(aes(x=date,y=ccases,label=Date,label1=Total_cases,label2=New_cases)) +
geom_line() + geom_point() + geom_col(aes(x=date,y=ncases)) +
theme(legend.position="none") + labs(y="Cases")
ggplotly(g, tooltip = c("Date","Total_cases","New_cases"))
dat$country
runApp('/Volumes/GoogleDrive/My Drive/Modelling/Corona/Corona')
source('~/.active-rstudio-document', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(leaflet)
library(DT)
dat <- read.csv("Corona/data/corona_island.csv")
dat <- dat %>% mutate(long = case_when(area=="east" ~ -6.2690,
area=="west" ~ -9.0650,
area=="south" ~ -8.5110),
lat = case_when(area=="east" ~ 53.3593,
area=="west" ~ 53.2760,
area=="south" ~ 51.8830))
showAreaPopup <- function(t, lat, lon) {
selectedArea <- dat_area[dat_area$area == t,]
content <- as.character(tagList(
tags$h4("Number of cases:", as.integer(selectedArea$ncases)),
tags$h4("Number of deaths:", as.integer(selectedArea$nmort))
))
leafletProxy("map") %>%
addPopups(lon, lat, content, layerId = t)
}
dat_area %>%
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(lng = -8, lat = 53, zoom = 7) %>%
addCircleMarkers(lng= ~long,
lat= ~lat,
radius = ~ncases*3)
datatable(dat)
g= dat %>%
mutate(date = as.Date(date,format = "%d/%m/%Y")) %>%
mutate_at(vars(gender), funs(as.character(.))) %>%
bind_rows(mutate(., gender = "All")) %>%
group_by(date,gender) %>%
summarise(ncases = sum(ncase)) %>%
na.omit() %>%
ggplot(aes(x=date,y=ncases,color=gender)) + geom_line() + geom_point() + theme(legend.position="none")
ggplotly(g)
g = dat %>%
mutate(date = as.Date(date,format = "%d/%m/%Y")) %>%
group_by(date) %>%
summarise(ncases = sum(ncase), New_cases = sum(ncase), Date = min(date)) %>%
na.omit() %>%
mutate(ccases = cumsum(ncases), Total_cases= cumsum(ncases)) %>%
ggplot(aes(x=date,y=ccases,label=Date,label1=Total_cases,label2=New_cases)) +
geom_line() + geom_point() + geom_col(aes(x=date,y=ncases)) +
theme(legend.position="none") + labs(y="Cases")
ggplotly(g, tooltip = c("Date","Total_cases","New_cases"))
input<-data.frame(place="italy",days=13)
myorder <- c("ireland","france","germany","italy","spain","uk")
dat <- dat %>% mutate(date = as.Date(date,format = "%d/%m/%Y"), country = as.character(country))
dat$country <- dat$country[order(match(dat$country,myorder))]
prop = mean(dat$pop[dat$country=="ireland"])/mean(dat$pop[dat$country==input$place])
dat$ncase[dat$country==input$place] <- round(dat$ncase[dat$country==input$place]*prop,0)
dat$date[dat$country==input$place] <- dat$date[dat$country==input$place]+input$days
dat$country[dat$country==input$place] <- paste(input$place, "scaled to ireland +",input$days,"days")
g = dat %>% mutate(date = as.Date(date,format = "%d/%m/%Y"))%>%
group_by(country, date) %>%
summarise(ncases = sum(ncase), New_cases = sum(ncase), Date = min(date), Country = country[1]) %>%
na.omit() %>%
mutate(ccases = cumsum(ncases), Total_cases= cumsum(ncases)) %>%
ggplot(aes(x=date,y=ccases,color=country,fill=country,label=Date,label1=Country,label2=Total_cases)) +
geom_line() + geom_point() +theme(legend.position="none") + labs(y="Cases")
ggplotly(g, tooltip = c("Country","Date","Total_cases","New_cases"))
input<-data.frame(place="italy",days=13)
myorder <- c("ireland","france","germany","italy","spain","uk")
dat <- dat %>% mutate(date = as.Date(date,format = "%d/%m/%Y"), country = as.character(country))
dat$country <- dat$country[order(match(dat$country,myorder))]
prop = mean(dat$pop[dat$country=="ireland"])/mean(dat$pop[dat$country==input$place])
dat$ncase[dat$country==input$place] <- round(dat$ncase[dat$country==input$place]*prop,0)
dat$date[dat$country==input$place] <- dat$date[dat$country==input$place]+input$days
dat$country[dat$country==input$place] <- paste(input$place, "scaled to ireland +",input$days,"days")
g = dat %>% mutate(date = as.Date(date,format = "%d/%m/%Y"))%>%
group_by(country, date) %>%
summarise(ncases = sum(ncase), New_cases = sum(ncase), Date = min(date), Country = country[1]) %>%
na.omit() %>%
mutate(ccases = cumsum(ncases), Total_cases= cumsum(ncases)) %>%
ggplot(aes(x=date,y=ccases,color=country,fill=country,label=Date,label1=Country,label2=Total_cases)) +
geom_line() + geom_point()+ labs(y="Cases")
ggplotly(g, tooltip = c("Country","Date","Total_cases","New_cases"))
runApp('/Volumes/GoogleDrive/My Drive/Modelling/Corona/Corona')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(leaflet)
library(DT)
dat <- read.csv("Corona/data/corona_island.csv")
dat <- dat %>% mutate(long = case_when(area=="east" ~ -6.2690,
area=="west" ~ -9.0650,
area=="south" ~ -8.5110),
lat = case_when(area=="east" ~ 53.3593,
area=="west" ~ 53.2760,
area=="south" ~ 51.8830))
showAreaPopup <- function(t, lat, lon) {
selectedArea <- dat_area[dat_area$area == t,]
content <- as.character(tagList(
tags$h4("Number of cases:", as.integer(selectedArea$ncases)),
tags$h4("Number of deaths:", as.integer(selectedArea$nmort))
))
leafletProxy("map") %>%
addPopups(lon, lat, content, layerId = t)
}
dat_area %>%
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(lng = -8, lat = 53, zoom = 7) %>%
addCircleMarkers(lng= ~long,
lat= ~lat,
radius = ~ncases*3)
datatable(dat)
g= dat %>%
mutate(date = as.Date(date,format = "%d/%m/%Y")) %>%
mutate_at(vars(gender), funs(as.character(.))) %>%
bind_rows(mutate(., gender = "All")) %>%
group_by(date,gender) %>%
summarise(ncases = sum(ncase)) %>%
na.omit() %>%
ggplot(aes(x=date,y=ncases,color=gender)) + geom_line() + geom_point() + theme(legend.position="none")
ggplotly(g)
g = dat %>%
mutate(date = as.Date(date,format = "%d/%m/%Y")) %>%
group_by(date) %>%
summarise(ncases = sum(ncase), New_cases = sum(ncase), Date = min(date)) %>%
na.omit() %>%
mutate(ccases = cumsum(ncases), Total_cases= cumsum(ncases)) %>%
ggplot(aes(x=date,y=ccases,label=Date,label1=Total_cases,label2=New_cases)) +
geom_line() + geom_point() + geom_col(aes(x=date,y=ncases)) +
theme(legend.position="none") + labs(y="Cases")
ggplotly(g, tooltip = c("Date","Total_cases","New_cases"))
myorder <- c("ireland","france","germany","italy","spain","uk")
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(leaflet)
library(DT)
rm(list=ls())
dat <- read.csv("Corona/data/corona_island.csv")
dat <- dat %>% mutate(long = case_when(area=="east" ~ -6.2690,
area=="west" ~ -9.0650,
area=="south" ~ -8.5110),
lat = case_when(area=="east" ~ 53.3593,
area=="west" ~ 53.2760,
area=="south" ~ 51.8830))
showAreaPopup <- function(t, lat, lon) {
selectedArea <- dat_area[dat_area$area == t,]
content <- as.character(tagList(
tags$h4("Number of cases:", as.integer(selectedArea$ncases)),
tags$h4("Number of deaths:", as.integer(selectedArea$nmort))
))
leafletProxy("map") %>%
addPopups(lon, lat, content, layerId = t)
}
dat_area %>%
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(lng = -8, lat = 53, zoom = 7) %>%
addCircleMarkers(lng= ~long,
lat= ~lat,
radius = ~ncases*3)
dat_area <- dat %>% group_by(area) %>% summarise(ncases=sum(ncase,na.rm=TRUE),
ndeaths=sum(ndeath,na.rm=TRUE),
long = mean(long,na.rm=TRUE),
lat = mean(lat, na.rm=TRUE)) %>%
na.omit()
dat_area <- dat %>% group_by(area) %>% summarise(ncases=sum(ncase,na.rm=TRUE),
ndeaths=sum(ndeath,na.rm=TRUE),
long = mean(long,na.rm=TRUE),
lat = mean(lat, na.rm=TRUE)) %>%
na.omit()
dat_area %>%
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(lng = -8, lat = 53, zoom = 7) %>%
addCircleMarkers(lng= ~long,
lat= ~lat,
radius = ~ncases*3)
g = dat %>%
mutate(date = as.Date(date,format = "%d/%m/%Y")) %>%
group_by(date) %>%
summarise(ncases = sum(ncase), New_cases = sum(ncase), Date = min(date)) %>%
na.omit() %>%
mutate(ccases = cumsum(ncases), Total_cases= cumsum(ncases)) %>%
ggplot(aes(x=date,y=ccases,label=Date,label1=Total_cases,label2=New_cases)) +
geom_line() + geom_point() + geom_col(aes(x=date,y=ncases)) +
theme(legend.position="none") + labs(y="Cases")
ggplotly(g, tooltip = c("Date","Total_cases","New_cases"))
g = dat %>%
filter(country=="ireland") %>%
mutate(date = as.Date(date,format = "%d/%m/%Y")) %>%
group_by(date) %>%
summarise(ncases = sum(ncase), New_cases = sum(ncase), Date = min(date)) %>%
na.omit() %>%
mutate(ccases = cumsum(ncases), Total_cases= cumsum(ncases)) %>%
ggplot(aes(x=date,y=ccases,label=Date,label1=Total_cases,label2=New_cases)) +
geom_line() + geom_point() + geom_col(aes(x=date,y=ncases)) +
theme(legend.position="none") + labs(y="Cases")
ggplotly(g, tooltip = c("Date","Total_cases","New_cases"))
View(dat)
input<-data.frame(place="italy",days=13)
myorder <- c("ireland","france","germany","italy","spain","uk")
dat <- dat %>% mutate(date = as.Date(date,format = "%d/%m/%Y"), country = as.character(country))
dat$country
input<-data.frame(place="italy",days=13)
myorder <- c("ireland","france","germany","italy","spain","uk")
dat <- dat %>% mutate(date = as.Date(date,format = "%d/%m/%Y"), country = as.character(country))
dat$country <- dat$country[order(match(dat$country,myorder))]
prop = mean(dat$pop[dat$country=="ireland"])/mean(dat$pop[dat$country==input$place])
dat$ncase[dat$country==input$place] <- round(dat$ncase[dat$country==input$place]*prop,0)
dat$date[dat$country==input$place] <- dat$date[dat$country==input$place]+input$days
dat$country[dat$country==input$place] <- paste(input$place, "scaled to ireland +",input$days,"days")
g = dat %>% mutate(date = as.Date(date,format = "%d/%m/%Y"))%>%
group_by(country, date) %>%
summarise(ncases = sum(ncase), New_cases = sum(ncase), Date = min(date), Country = country[1]) %>%
na.omit() %>%
mutate(ccases = cumsum(ncases), Total_cases= cumsum(ncases)) %>%
ggplot(aes(x=date,y=ccases,color=country,label=Date,label1=Country,label2=Total_cases)) +
geom_line() + geom_point()+ labs(y="Cases")
ggplotly(g, tooltip = c("Country","Date","Total_cases","New_cases"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(leaflet)
library(DT)
rm(list=ls())
dat <- read.csv("Corona/data/corona_island.csv")
dat <- dat %>% mutate(long = case_when(area=="east" ~ -6.2690,
area=="west" ~ -9.0650,
area=="south" ~ -8.5110),
lat = case_when(area=="east" ~ 53.3593,
area=="west" ~ 53.2760,
area=="south" ~ 51.8830))
dat_area <- dat %>% group_by(area) %>% summarise(ncases=sum(ncase,na.rm=TRUE),
ndeaths=sum(ndeath,na.rm=TRUE),
long = mean(long,na.rm=TRUE),
lat = mean(lat, na.rm=TRUE)) %>%
na.omit()
showAreaPopup <- function(t, lat, lon) {
selectedArea <- dat_area[dat_area$area == t,]
content <- as.character(tagList(
tags$h4("Number of cases:", as.integer(selectedArea$ncases)),
tags$h4("Number of deaths:", as.integer(selectedArea$nmort))
))
leafletProxy("map") %>%
addPopups(lon, lat, content, layerId = t)
}
dat_area %>%
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(lng = -8, lat = 53, zoom = 7) %>%
addCircleMarkers(lng= ~long,
lat= ~lat,
radius = ~ncases*3)
datatable(dat)
g= dat %>%
mutate(date = as.Date(date,format = "%d/%m/%Y")) %>%
mutate_at(vars(gender), funs(as.character(.))) %>%
bind_rows(mutate(., gender = "All")) %>%
group_by(date,gender) %>%
summarise(ncases = sum(ncase)) %>%
na.omit() %>%
ggplot(aes(x=date,y=ncases,color=gender)) + geom_line() + geom_point() + theme(legend.position="none")
ggplotly(g)
g = dat %>%
filter(country=="ireland") %>%
mutate(date = as.Date(date,format = "%d/%m/%Y")) %>%
group_by(date) %>%
summarise(ncases = sum(ncase), New_cases = sum(ncase), Date = min(date)) %>%
na.omit() %>%
mutate(ccases = cumsum(ncases), Total_cases= cumsum(ncases)) %>%
ggplot(aes(x=date,y=ccases,label=Date,label1=Total_cases,label2=New_cases)) +
geom_line() + geom_point() + geom_col(aes(x=date,y=ncases)) +
theme(legend.position="none") + labs(y="Cases")
ggplotly(g, tooltip = c("Date","Total_cases","New_cases"))
levels(dat$country)
mycolours <- setNames( c('red', 'yellow', 'green', 'blue', 'purple', 'pink')
, levels(dat$country)  )
mycolours
input<-data.frame(place="italy",days=13)
mycolours <- setNames( c('red', 'yellow', 'green', 'blue', 'purple', 'pink')
, levels(dat$country)  )
dat <- dat %>% mutate(date = as.Date(date,format = "%d/%m/%Y"), country = as.character(country))
prop = mean(dat$pop[dat$country=="ireland"])/mean(dat$pop[dat$country==input$place])
dat$ncase[dat$country==input$place] <- round(dat$ncase[dat$country==input$place]*prop,0)
dat$date[dat$country==input$place] <- dat$date[dat$country==input$place]+input$days
dat$country[dat$country==input$place] <- paste(input$place, "scaled to ireland +",input$days,"days")
g = dat %>% mutate(date = as.Date(date,format = "%d/%m/%Y"))%>%
group_by(country, date) %>%
summarise(ncases = sum(ncase), New_cases = sum(ncase), Date = min(date), Country = country[1]) %>%
na.omit() %>%
mutate(ccases = cumsum(ncases), Total_cases= cumsum(ncases)) %>%
ggplot(aes(x=date,y=ccases,color=country,label=Date,label1=Country,label2=Total_cases)) +
geom_line() + geom_point()+ labs(y="Cases") + scale_color_manual(values = irisColors) + theme_bw()
g = dat %>% mutate(date = as.Date(date,format = "%d/%m/%Y"))%>%
group_by(country, date) %>%
summarise(ncases = sum(ncase), New_cases = sum(ncase), Date = min(date), Country = country[1]) %>%
na.omit() %>%
mutate(ccases = cumsum(ncases), Total_cases= cumsum(ncases)) %>%
ggplot(aes(x=date,y=ccases,color=country,label=Date,label1=Country,label2=Total_cases)) +
geom_line() + geom_point()+ labs(y="Cases") + scale_color_manual(values = mycolours) + theme_bw()
ggplotly(g, tooltip = c("Country","Date","Total_cases","New_cases"))
mycolours <- setNames( c('red', 'yellow', 'green', 'darkblue', 'purple', 'pink')
, levels(dat$country)  )
dat <- dat %>% mutate(date = as.Date(date,format = "%d/%m/%Y"), country = as.character(country))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(leaflet)
library(DT)
rm(list=ls())
dat <- read.csv("Corona/data/corona_island.csv")
dat <- dat %>% mutate(long = case_when(area=="east" ~ -6.2690,
area=="west" ~ -9.0650,
area=="south" ~ -8.5110),
lat = case_when(area=="east" ~ 53.3593,
area=="west" ~ 53.2760,
area=="south" ~ 51.8830))
dat_area <- dat %>% group_by(area) %>% summarise(ncases=sum(ncase,na.rm=TRUE),
ndeaths=sum(ndeath,na.rm=TRUE),
long = mean(long,na.rm=TRUE),
lat = mean(lat, na.rm=TRUE)) %>%
na.omit()
showAreaPopup <- function(t, lat, lon) {
selectedArea <- dat_area[dat_area$area == t,]
content <- as.character(tagList(
tags$h4("Number of cases:", as.integer(selectedArea$ncases)),
tags$h4("Number of deaths:", as.integer(selectedArea$nmort))
))
leafletProxy("map") %>%
addPopups(lon, lat, content, layerId = t)
}
dat_area %>%
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(lng = -8, lat = 53, zoom = 7) %>%
addCircleMarkers(lng= ~long,
lat= ~lat,
radius = ~ncases*3)
datatable(dat)
g= dat %>%
mutate(date = as.Date(date,format = "%d/%m/%Y")) %>%
mutate_at(vars(gender), funs(as.character(.))) %>%
bind_rows(mutate(., gender = "All")) %>%
group_by(date,gender) %>%
summarise(ncases = sum(ncase)) %>%
na.omit() %>%
ggplot(aes(x=date,y=ncases,color=gender)) + geom_line() + geom_point() + theme(legend.position="none")
ggplotly(g)
g = dat %>%
filter(country=="ireland") %>%
mutate(date = as.Date(date,format = "%d/%m/%Y")) %>%
group_by(date) %>%
summarise(ncases = sum(ncase), New_cases = sum(ncase), Date = min(date)) %>%
na.omit() %>%
mutate(ccases = cumsum(ncases), Total_cases= cumsum(ncases)) %>%
ggplot(aes(x=date,y=ccases,label=Date,label1=Total_cases,label2=New_cases)) +
geom_line() + geom_point() + geom_col(aes(x=date,y=ncases)) +
theme(legend.position="none") + labs(y="Cases")
ggplotly(g, tooltip = c("Date","Total_cases","New_cases"))
input<-data.frame(place="italy",days=13)
mycolours <- setNames( c('red', 'yellow', 'green', 'darkblue', 'purple', 'pink')
, levels(dat$country)  )
dat <- dat %>% mutate(date = as.Date(date,format = "%d/%m/%Y"), country = as.character(country))
prop = mean(dat$pop[dat$country=="ireland"])/mean(dat$pop[dat$country==input$place])
dat$ncase[dat$country==input$place] <- round(dat$ncase[dat$country==input$place]*prop,0)
dat$date[dat$country==input$place] <- dat$date[dat$country==input$place]+input$days
dat$country[dat$country==input$place] <- paste(input$place, "scaled to ireland +",input$days,"days")
g = dat %>% mutate(date = as.Date(date,format = "%d/%m/%Y"))%>%
group_by(country, date) %>%
summarise(ncases = sum(ncase), New_cases = sum(ncase), Date = min(date), Country = country[1]) %>%
na.omit() %>%
mutate(ccases = cumsum(ncases), Total_cases= cumsum(ncases)) %>%
ggplot(aes(x=date,y=ccases,color=country,label=Date,label1=Country,label2=Total_cases)) +
geom_line() + geom_point()+ labs(y="Cases") + scale_color_manual(values = mycolours) + theme_bw()
ggplotly(g, tooltip = c("Country","Date","Total_cases","New_cases"))
runApp('/Volumes/GoogleDrive/My Drive/Modelling/Corona/Corona')
runApp('coronaviz')
shiny::runApp()
runApp('mobileapp.R')
runApp('mobileapp.R')
?addCircleMarkers
runApp('mobileapp.R')
library(leaflet)
cities = data.frame( name = c('Madrid','Barcelona','Sevilla'),
country = c('Spain','Spain','Spain'),
region = c('Comunidad de Madrid','Cataluña','Andalucia'),
data = c(100, 200, 300),
lng = c(-3.683333,2.166667,-6.083333),
lat = c(40.433333,41.383333,37.446667))
labs <- lapply(seq(nrow(cities)), function(i) {
paste0( '<p>', cities[i, "name"], '<p></p>',
cities[i, "region"], ', ',
cities[i, "country"],'</p><p>',
cities[i, "data"], '</p>' )
})
map2 = leaflet( cities ) %>%
addTiles() %>%
addCircles(lng = ~lng, lat = ~lat, fillColor = 'darkBlue', radius = 10000,
stroke = FALSE, fillOpacity = 0.8,
label = lapply(labs, htmltools::HTML))
map2
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
library(shiny); runApp('mobileapp.R')
devtools::install_github("rstudio/htmltools")
runApp('mobileapp.R')
library(ggplotly)
library(plotly)
library(ggplot2)
?ggsubtitle
?ggtitle
?ggplotly
runApp('mobileapp.R')
runApp('mobileapp.R')
runApp('mobileapp.R')
runApp()
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
quant <- list()
for(i in 1:4){
# simulate M values from the prior
probs <- rbeta(M, my_alpha[i], my_beta[i])
# simulate M successful events (se)
se    <- rbinom(M, N, probs) # actual se = 75
# simulate from M posteriors
posts <- rbeta(M, my_alpha[i] + se, N - se + my_beta[i])
# find 2.5 and 97.5 percentile of posterior probability of successful event
quant <- quantile(posts,probs=c(0.025,0.975))
}
knitr::opts_chunk$set(echo = TRUE)
# four options for alpha parameter of prior
my_alpha = c(22354,11177,4470.8,2235)
# four options for beta parameter of prior
my_beta = c(10,5,2,1)
N=75 # number of new patients
M=1000 # number of draws
quant <- list()
for(i in 1:4){
# simulate M values from the prior
probs <- rbeta(M, my_alpha[i], my_beta[i])
# simulate M successful events (se)
se    <- rbinom(M, N, probs) # actual se = 75
# simulate from M posteriors
posts <- rbeta(M, my_alpha[i] + se, N - se + my_beta[i])
# find 2.5 and 97.5 percentile of posterior probability of successful event
quant <- quantile(posts,probs=c(0.025,0.975))
}
quant
quant <- list()
for(i in 1:4){
# simulate M values from the prior
probs <- rbeta(M, my_alpha[i], my_beta[i])
# simulate M successful events (se)
se    <- rbinom(M, N, probs) # actual se = 75
# simulate from M posteriors
posts <- rbeta(M, my_alpha[i] + se, N - se + my_beta[i])
# find 2.5 and 97.5 percentile of posterior probability of successful event
quant[[i]] <- quantile(posts,probs=c(0.025,0.975))
}
quant[[1]]
quant[[1:4]][1]
quant[[1:4]]
quant[[1]]
quant[[c(1,2)]]
quant[[c(1,1:4)]]
quant[[c(1,1)]]
unlist(quant)
round(unlist(quant)[8],4)
round(unlist(quant)[7],4)
round(unlist(quant)[7],4)*10000
