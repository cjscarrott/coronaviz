write.csv(shinydata1, "coronaviz/data/corona_island_nz.csv", quote = FALSE, row.names = FALSE)
shiny::runApp('coronaviz')
library(tidyverse)
######
#
# Poisson modelling irish counts
shinydata = read.csv("coronaviz/data/corona_island_nz.csv")
shinydata = data.frame(shinydata)
shinydata$date = as.Date(shinydata$date, format = "%d/%m/%Y")
shinydata$gender = as.character(shinydata$gender)
shinydata$area = as.character(shinydata$area)
shinydata$country = as.character(shinydata$country)
shinydata$ncase = as.numeric(shinydata$ncase)
shinydata$ndeath = as.numeric(shinydata$ndeath)
dailydata = shinydata %>% select(date, ncase, ndeath, country) %>%
group_by(date, country) %>%
summarise(ncases = sum(ncase), ndeaths = sum(ndeath)) %>%
arrange(country, date) %>%
ungroup()
iedata = dailydata %>% filter(country == "ireland") %>% select(date, ncases, ndeaths)
nzdata = dailydata %>% filter(country == "new zealand") %>% select(date, ncases, ndeaths)
# pad out days in between with zero counts to obtain complete time series record
# Note: will only allow one zero count day preceding the non-zero cumulative count
iedata = iedata %>% complete(date = seq.Date(min(date), max(date), by = "day"), fill = list(ncases = 0, ndeaths = 0)) %>%
mutate(ccases = cumsum(ncases)) %>%
filter(date >= date[max(c(which(ncases > 0)[1] - 1, 1))]) %>%
mutate(date0 = as.numeric(date - min(date)))
# Poisson glm
poisson.model <- glm(ccases ~ date0, iedata, family = quasipoisson(link = "log"))
summary(poisson.model)
# n-step forecasting
nsteps = 5
newdata = data.frame(date0 = 0:(max(iedata$date0) + nsteps))
yhat = predict(poisson.model, newdata = newdata, type = "response")
with(iedata, plot(date, ccases, type = "b", xlim = c(min(date), max(date) + nsteps), ylim = c(0, max(yhat))))
points(min(iedata$date) + newdata$date0, yhat, col = "blue")
# double every x days. solve for x.
doubledays = log(2)/coef(poisson.model)[2]
# Check this calc ;)
newdata = data.frame(date0 = seq(0, (max(iedata$date0) + nsteps), doubledays))
yhat = predict(poisson.model, newdata = newdata, type = "response")
(yhat[-1]/yhat[-length(yhat)])
######
#
# Fix double in X days and fit
# Note: Poisson GLM does not work well to estimate intercept as log() link
# gives too much weight for low counts, MAD visually performs better
doublefix = 2:5
# for each value of x and intercept for log-linear growth, calculate the MAD
trygrowth <- function(intercept, days.to.double, countdata) {
betafix = log(2) / days.to.double
yhat = exp(intercept + betafix * countdata$date0)
mean(abs(countdata$ccases - yhat))
}
# optimise over intercept, separately for each value of X (i.e. find optimal intercept to minimise MAD)
alphahats = sapply(doublefix, function(x) optim(coef(poisson.model)[1], trygrowth, days.to.double = x, countdata = iedata)$par)
exp(alphahats)
# n-step forecasting
nsteps = 5
newdata = data.frame(date0 = seq(0, (max(iedata$date0) + nsteps), length.out = 1000))
# apply log-linear growth for each X (and optimal intercept)
yhats = sapply(1:length(doublefix), function(i) exp(alphahats[i] + newdata$date0 * log(2) / doublefix[i]))
# plot results
with(iedata, plot(date, ccases, type = "l", xlim = c(min(date), max(date) + nsteps), ylim = c(0, max(yhat)),
lwd = 2, cex = 1))
with(iedata, points(date, ccases, cex = 1))
pointcols = c("red", "darkgreen", "blue", "purple")
for (i in 1:length(doublefix)) lines(min(iedata$date) + newdata$date0, yhats[, i], col = pointcols[i], lty = 3, lwd = 1.5)
# Add Poisson fit from above
yhat = predict(poisson.model, newdata = newdata, type = "response")
lines(min(iedata$date) + newdata$date0, yhat, col = "black", lty = 2, lwd = 2)
legend("topleft", legend = c("Actual counts", paste("Estimate:", round(doubledays, 2)), doublefix),
lty = c(1, 2, rep(3, length(doublefix))), lwd = c(2, 2, rep(1.5, length(doublefix))),
col = c(rep("black", 2), pointcols), title = "Double in how many days?")
View(iedata)
View(newdata)
View(yhats)
# plot results
with(iedata, plot(date, ccases, type = "l", xlim = c(min(date), max(date) + nsteps), ylim = c(0, max(yhat)),
lwd = 2, cex = 1))
with(iedata, points(date, ccases, cex = 1))
pointcols = c("red", "darkgreen", "blue", "purple")
for (i in 1:length(doublefix)) lines(min(iedata$date) + newdata$date0, yhats[, i], col = pointcols[i], lty = 3, lwd = 1.5)
newdata$date0
library(tidyverse)
library(rvest)
library(httr)
library(spData) # NZ regions
library(DHBins) # NZ DHB regions
library(readxl)
data(dhb_cars)
dhbnames = sort(as.character(dhb_cars$dhb)) # can't find a better official source of NZ DHB names in R
dhbnames[dhbnames == "Hutt"] = "Hutt Valley" # incorrect in library
dhbnames[dhbnames == "Midcentral"] = "MidCentral"  # incorrect in library
agelevels = c("<1", "1 to 4", "5 to 9", "10 to 14", "15 to 19", "20 to 29", "30 to 39", "40 to 49", "50 to 59",
"60 to 69", "70+", "unknown")
######
#
# Access official NZ Ministry of Health data (individual patient level)
nzdate = tolower(format(as.Date(Sys.time()), "%d_%b_%Y"))
nzurl = paste("https://www.health.govt.nz/system/files/documents/pages/covid-cases-", nzdate, ".xlsx", sep = "")
nzfn = rev(strsplit(nzurl, "/")[[1]])[1]
# Download the dataset from the website to a local temporary file
GET(nzurl, authenticate(":", ":", type="ntlm"), write_disk(nzfn, overwrite = TRUE))
# extract CONFIRMED NZ covid-19 case Excel datafile from MoH website
confirmed = data.frame(read_excel(nzfn, sheet = "confirmed", skip = 3))
confirmed = confirmed %>% select(Report.Date, Sex, Age.Group, DHB, Overseas)
confirmed$DHB = factor(confirmed$DHB, levels = dhbnames) # will give warning and NA entry if not valid
confirmed$Age.Group[confirmed$Age.Group == "Unknown"] = "unknown"
confirmed$Age.Group = factor(confirmed$Age.Group, levels = agelevels)
confirmed$Overseas[is.na(confirmed$Overseas)] = "unknown"
confirmed$Overseas = factor(confirmed$Overseas)
confirmed$Sex[is.na(confirmed$Sex)] = "unknown"
confirmed$Sex = factor(tolower(confirmed$Sex))
# extract PROBABLE NZ covid-19 case Excel datafile from MoH website
probable = data.frame(read_excel(nzfn, sheet = "probable", skip = 3))
probable = probable %>% select(ReportDate, Sex, Age.Group, DHB, Overseas)
probable$DHB = factor(probable$DHB, levels = dhbnames) # will give warning and NA entry if not valid
probable$Age.Group[probable$Age.Group == "Unknown"] = "unknown"
probable$Age.Group = factor(probable$Age.Group, levels = agelevels)
probable$Overseas[is.na(probable$Overseas)] = "unknown"
probable$Overseas = factor(probable$Overseas)
probable$Sex[is.na(probable$Sex)] = "unknown"
probable$Sex = factor(tolower(probable$Sex))
######
#
# Access official ECDPC count data per country
# Load library
# Website and filename for European Centre for Disease Prevention and Control Covid-19 data
todaysdate = format(as.Date(Sys.time())-1, "%Y-%m-%d") # NZ is always ahead!
ecdpcurl = paste("https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide-", todaysdate, ".xlsx", sep = "")
ecdpcfn = rev(strsplit(ecdpcurl, "/")[[1]])[1]
# Download the dataset from the website to a local temporary file
GET(ecdpcurl, authenticate(":", ":", type = "ntlm"), write_disk(ecdpcfn, overwrite = TRUE))
# Read dataset
ecdpcdata = read_excel(ecdpcfn)
# Date object
# Have checked that Day/Month/Year is same as DateRep
ecdpcdata$dateRep = as.Date(ecdpcdata$dateRep, format = "%d/%m/%Y")
# Factors and replace "_" with " "
ecdpcdata$countriesAndTerritories = gsub("_",  " ", ecdpcdata$countriesAndTerritories)
ecdpcdata$countriesAndTerritories = factor(ecdpcdata$countriesAndTerritories)
ecdpcdata$geoId = factor(ecdpcdata$geoId)
ecdpcdata$countryterritoryCode = factor(ecdpcdata$countryterritoryCode)
nzdata = ecdpcdata[ecdpcdata$countriesAndTerritories == "New Zealand", ]
# Cumulative count (dates are reverse order in dataset)
nzdata$TotalCases = rev(cumsum(rev(nzdata$cases)))
nzdata$TotalDeaths = rev(cumsum(rev(nzdata$deaths)))
# Gives warning if MoH count of cases does not match ECDPC
if (nzdata$TotalCases[1] != dim(confirmed)[1]) {
warning(paste("MoH says", dim(confirmed)[1], "confirmed cases, but ECDPC says", nzdata$TotalCases[1],
"(sometimes ECDPC lags behind NZ by 1 day)", sep = " "))
}
if (nzdata$TotalCases[1] != (dim(confirmed)[1] + dim(probable)[1])) {
warning(paste("MoH says", dim(confirmed)[1] + dim(probable)[1], "confirmed and probable cases, but ECDPC says", nzdata$TotalCases[1],
"(sometimes ECDPC lags behind NZ by 1 day)", sep = " "))
}
# Seems that ECDPC is now back to showing only confirmed cases for NZ
######
#
# Access official NZ Ministry of Health data (*** daily summaries ***)
nzurl = "https://www.health.govt.nz/our-work/diseases-and-conditions/covid-19-novel-coronavirus/covid-19-current-cases"
# extract NZ covid-19 case data from MoH website
webpage = read_html(nzurl)
# Get the confirmed cases
alltables = html_nodes(webpage, "table")
alltables = html_table(alltables)
dailytable = alltables[[1]]
#DHBtable = alltables[[2]] # not useful as includes "probable" cases
nconfirmed = as.numeric(dailytable[1, 2])
newconfirmed = as.numeric(dailytable[1, 3])
ndeaths = as.numeric(dailytable[6, 2])
# Gives error if new count is not consistent with old data
if (nconfirmed != dim(confirmed)[1]) {
stop("Confirmed case count does not equal saily summary table")
}
# Keep ongoing record of summary data
write.csv(dailytable, paste("MoH_",nzdate,".csv", sep = ""), quote = FALSE, row.names = FALSE)
#######
#
# Adjust to same format as for Shiny app
# Firstly group by date, region and gender and put in date order
nzshinydata = confirmed %>% group_by(Report.Date, Sex, DHB) %>%
summarise(ncase = length(Report.Date)) %>%
mutate(country = "new zealand", ndeath = 0) %>%
select(date = Report.Date, ncase, ndeath, gender = Sex, area = DHB, country) %>%
ungroup()
# Deaths need manual input
nzshinydata = nzshinydata %>% add_row(date = "2020-03-28", ncase = 0, ndeath = 1, gender = "female",
area = "West Coast", country = "new zealand") %>%
group_by(date, gender, area, country) %>%
summarise(ncase = sum(ncase), ndeath = sum(ndeath)) %>%
select(date, ncase, ndeath, gender, area, country) %>%
ungroup() %>% arrange(date, area, gender)
nzshinydata = data.frame(nzshinydata)
######
#
# Update Shiny datafile
shinydata = read.csv("coronaviz/data/corona_island.csv")
shinydata = data.frame(shinydata)
shinydata$date = as.Date(shinydata$date, format = "%d/%m/%Y")
shinydata$gender = as.character(shinydata$gender)
shinydata$area = as.character(shinydata$area)
shinydata$country = as.character(shinydata$country)
nzshinydata$gender = as.character(nzshinydata$gender)
nzshinydata$area = as.character(nzshinydata$area)
shinydata1 = rbind(shinydata, nzshinydata)
shinydata1$date = as.character(shinydata1$date, format = "%d/%m/%Y")
# # Save old datafile and create updated one
# file.rename("coronaviz-master (6)/coronaviz-master/data/corona_island_nz.csv",
#             "coronaviz-master (6)/coronaviz-master/data/corona_island_nz_old.csv")
write.csv(shinydata1, "coronaviz/data/corona_island_nz.csv", quote = FALSE, row.names = FALSE)
shiny::runApp('coronaviz')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz')
runApp('coronaviz')
install.packages("MFTSR")
runApp('coronaviz')
ewma.func <- function(rets, lambda) {
sig.p <- 0
sig.s <- vapply(rets, function(r) sig.p <<- sig.p*lambda + (r^2)*(1 - lambda), 0)
return(sqrt(sig.s))
}
ewma.func <- function(rets, lambda) {
sig.p <- 0
sig.s <- vapply(rets, function(r) sig.p <<- sig.p*lambda + (r^2)*(1 - lambda), 0)
return(sqrt(sig.s))
}
rets <- c(10,100,1000)
ewma.func(rets,0.5)
dat <- read.csv("coronaviz/data/corona_island.csv") %>%         filter(country=="ireland") %>%
mutate(date = as.Date(date,format = "%d/%m/%Y")) %>%
group_by(date) %>%
summarise(ncases = sum(ncase), New_cases = sum(ncase), Date = min(date)) %>%
na.omit() %>%
mutate(ccases = cumsum(ncases), Total_cases= cumsum(ncases)) %>%
mutate(Growth = round2(((Total_cases/c(NA,Total_cases[1:(length(Total_cases)-1)]))-1)*100,0))
dat <- read.csv("coronaviz/data/corona_island.csv") %>%         filter(country=="ireland") %>%
mutate(date = as.Date(date,format = "%d/%m/%Y")) %>%
group_by(date) %>%
summarise(ncases = sum(ncase), New_cases = sum(ncase), Date = min(date)) %>%
na.omit() %>%
mutate(ccases = cumsum(ncases), Total_cases= cumsum(ncases)) %>%
mutate(Growth = round(((Total_cases/c(NA,Total_cases[1:(length(Total_cases)-1)]))-1)*100,0))
View(dat)
ewma(dat$Total_cases, 0.5)
ewma.func(dat$Total_cases, 0.5)
plot(1:30,ewma.func(dat$Total_cases, 0.5))
runApp('coronaviz')
runApp('coronaviz')
runApp('coronaviz')
library(tidyverse)
library(rvest)
library(httr)
library(spData) # NZ regions
library(DHBins) # NZ DHB regions
library(readxl)
data(dhb_cars)
dhbnames = sort(as.character(dhb_cars$dhb)) # can't find a better official source of NZ DHB names in R
dhbnames[dhbnames == "Hutt"] = "Hutt Valley" # incorrect in library
dhbnames[dhbnames == "Midcentral"] = "MidCentral"  # incorrect in library
agelevels = c("<1", "1 to 4", "5 to 9", "10 to 14", "15 to 19", "20 to 29", "30 to 39", "40 to 49", "50 to 59",
"60 to 69", "70+", "unknown")
######
#
# Access official NZ Ministry of Health data (individual patient level)
nzdate = tolower(format(as.Date(Sys.time()), "%d_%b_%Y"))
nzurl = paste("https://www.health.govt.nz/system/files/documents/pages/covid-cases-", nzdate, ".xlsx", sep = "")
nzfn = rev(strsplit(nzurl, "/")[[1]])[1]
# Download the dataset from the website to a local temporary file
GET(nzurl, authenticate(":", ":", type="ntlm"), write_disk(nzfn, overwrite = TRUE))
# extract CONFIRMED NZ covid-19 case Excel datafile from MoH website
confirmed = data.frame(read_excel(nzfn, sheet = "confirmed", skip = 3))
confirmed = confirmed %>% select(Report.Date, Sex, Age.Group, DHB, Overseas)
confirmed$DHB = factor(confirmed$DHB, levels = dhbnames) # will give warning and NA entry if not valid
confirmed$Age.Group[confirmed$Age.Group == "Unknown"] = "unknown"
confirmed$Age.Group = factor(confirmed$Age.Group, levels = agelevels)
confirmed$Overseas[is.na(confirmed$Overseas)] = "unknown"
confirmed$Overseas = factor(confirmed$Overseas)
confirmed$Sex[is.na(confirmed$Sex)] = "unknown"
confirmed$Sex = factor(tolower(confirmed$Sex))
# extract PROBABLE NZ covid-19 case Excel datafile from MoH website
probable = data.frame(read_excel(nzfn, sheet = "probable", skip = 3))
probable = probable %>% select(ReportDate, Sex, Age.Group, DHB, Overseas)
probable$DHB = factor(probable$DHB, levels = dhbnames) # will give warning and NA entry if not valid
probable$Age.Group[probable$Age.Group == "Unknown"] = "unknown"
probable$Age.Group = factor(probable$Age.Group, levels = agelevels)
probable$Overseas[is.na(probable$Overseas)] = "unknown"
probable$Overseas = factor(probable$Overseas)
probable$Sex[is.na(probable$Sex)] = "unknown"
probable$Sex = factor(tolower(probable$Sex))
######
#
# Access official ECDPC count data per country
# Load library
# Website and filename for European Centre for Disease Prevention and Control Covid-19 data
todaysdate = format(as.Date(Sys.time())-1, "%Y-%m-%d") # NZ is always ahead!
ecdpcurl = paste("https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide-", todaysdate, ".xlsx", sep = "")
ecdpcfn = rev(strsplit(ecdpcurl, "/")[[1]])[1]
# Download the dataset from the website to a local temporary file
GET(ecdpcurl, authenticate(":", ":", type = "ntlm"), write_disk(ecdpcfn, overwrite = TRUE))
# Read dataset
ecdpcdata = read_excel(ecdpcfn)
# Date object
# Have checked that Day/Month/Year is same as DateRep
ecdpcdata$dateRep = as.Date(ecdpcdata$dateRep, format = "%d/%m/%Y")
# Factors and replace "_" with " "
ecdpcdata$countriesAndTerritories = gsub("_",  " ", ecdpcdata$countriesAndTerritories)
ecdpcdata$countriesAndTerritories = factor(ecdpcdata$countriesAndTerritories)
ecdpcdata$geoId = factor(ecdpcdata$geoId)
ecdpcdata$countryterritoryCode = factor(ecdpcdata$countryterritoryCode)
nzdata = ecdpcdata[ecdpcdata$countriesAndTerritories == "New Zealand", ]
# Cumulative count (dates are reverse order in dataset)
nzdata$TotalCases = rev(cumsum(rev(nzdata$cases)))
nzdata$TotalDeaths = rev(cumsum(rev(nzdata$deaths)))
# Gives warning if MoH count of cases does not match ECDPC
if (nzdata$TotalCases[1] != dim(confirmed)[1]) {
warning(paste("MoH says", dim(confirmed)[1], "confirmed cases, but ECDPC says", nzdata$TotalCases[1],
"(sometimes ECDPC lags behind NZ by 1 day)", sep = " "))
}
if (nzdata$TotalCases[1] != (dim(confirmed)[1] + dim(probable)[1])) {
warning(paste("MoH says", dim(confirmed)[1] + dim(probable)[1], "confirmed and probable cases, but ECDPC says", nzdata$TotalCases[1],
"(sometimes ECDPC lags behind NZ by 1 day)", sep = " "))
}
# Seems that ECDPC is now back to showing only confirmed cases for NZ
######
#
# Access official NZ Ministry of Health data (*** daily summaries ***)
nzurl = "https://www.health.govt.nz/our-work/diseases-and-conditions/covid-19-novel-coronavirus/covid-19-current-cases"
# extract NZ covid-19 case data from MoH website
webpage = read_html(nzurl)
# Get the confirmed cases
alltables = html_nodes(webpage, "table")
alltables = html_table(alltables)
dailytable = alltables[[1]]
#DHBtable = alltables[[2]] # not useful as includes "probable" cases
nconfirmed = as.numeric(dailytable[1, 2])
newconfirmed = as.numeric(dailytable[1, 3])
ndeaths = as.numeric(dailytable[6, 2])
# Gives error if new count is not consistent with old data
if (nconfirmed != dim(confirmed)[1]) {
stop("Confirmed case count does not equal saily summary table")
}
# Keep ongoing record of summary data
write.csv(dailytable, paste("MoH_",nzdate,".csv", sep = ""), quote = FALSE, row.names = FALSE)
#######
#
# Adjust to same format as for Shiny app
# Firstly group by date, region and gender and put in date order
nzshinydata = confirmed %>% group_by(Report.Date, Sex, DHB) %>%
summarise(ncase = length(Report.Date)) %>%
mutate(country = "new zealand", ndeath = 0) %>%
select(date = Report.Date, ncase, ndeath, gender = Sex, area = DHB, country) %>%
ungroup()
# Deaths need manual input
nzshinydata = nzshinydata %>% add_row(date = "2020-03-28", ncase = 0, ndeath = 1, gender = "female",
area = "West Coast", country = "new zealand") %>%
group_by(date, gender, area, country) %>%
summarise(ncase = sum(ncase), ndeath = sum(ndeath)) %>%
select(date, ncase, ndeath, gender, area, country) %>%
ungroup() %>% arrange(date, area, gender)
nzshinydata = data.frame(nzshinydata)
######
#
# Update Shiny datafile
shinydata = read.csv("coronaviz/data/corona_island.csv")
shinydata = data.frame(shinydata)
shinydata$date = as.Date(shinydata$date, format = "%d/%m/%Y")
shinydata$gender = as.character(shinydata$gender)
shinydata$area = as.character(shinydata$area)
shinydata$country = as.character(shinydata$country)
nzshinydata$gender = as.character(nzshinydata$gender)
nzshinydata$area = as.character(nzshinydata$area)
shinydata1 = rbind(shinydata, nzshinydata)
shinydata1$date = as.character(shinydata1$date, format = "%d/%m/%Y")
# # Save old datafile and create updated one
# file.rename("coronaviz-master (6)/coronaviz-master/data/corona_island_nz.csv",
#             "coronaviz-master (6)/coronaviz-master/data/corona_island_nz_old.csv")
write.csv(shinydata1, "coronaviz/data/corona_island_nz.csv", quote = FALSE, row.names = FALSE)
runApp('coronaviz')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz')
library(tidyverse)
library(rvest)
library(httr)
library(spData) # NZ regions
library(DHBins) # NZ DHB regions
library(readxl)
data(dhb_cars)
dhbnames = sort(as.character(dhb_cars$dhb)) # can't find a better official source of NZ DHB names in R
dhbnames[dhbnames == "Hutt"] = "Hutt Valley" # incorrect in library
dhbnames[dhbnames == "Midcentral"] = "MidCentral"  # incorrect in library
agelevels = c("<1", "1 to 4", "5 to 9", "10 to 14", "15 to 19", "20 to 29", "30 to 39", "40 to 49", "50 to 59",
"60 to 69", "70+", "unknown")
######
#
# Access official NZ Ministry of Health data (individual patient level)
nzdate = tolower(format(as.Date(Sys.time()), "%d_%b_%Y"))
nzurl = paste("https://www.health.govt.nz/system/files/documents/pages/covidcase_list_", nzdate, "_for_web_-_updated.xlsx", sep = "")
nzfn = rev(strsplit(nzurl, "/")[[1]])[1]
# Download the dataset from the website to a local temporary file
GET(nzurl, authenticate(":", ":", type="ntlm"), write_disk(nzfn, overwrite = TRUE))
# extract CONFIRMED NZ covid-19 case Excel datafile from MoH website
confirmed = data.frame(read_excel(nzfn, sheet = "Confirmed", skip = 3))
confirmed = confirmed %>% select(Date.of.report, Sex, Age.group, DHB, International.travel)
confirmed$DHB = factor(confirmed$DHB, levels = dhbnames) # will give warning and NA entry if not valid
confirmed$Age.group[confirmed$Age.group == "Unknown"] = "unknown"
confirmed$Age.group = factor(confirmed$Age.group, levels = agelevels)
confirmed$International.travel[is.na(confirmed$International.travel)] = "unknown"
confirmed$International.travel = factor(confirmed$International.travel)
confirmed$Sex[is.na(confirmed$Sex)] = "unknown"
confirmed$Sex = factor(tolower(confirmed$Sex))
# extract PROBABLE NZ covid-19 case Excel datafile from MoH website
probable = data.frame(read_excel(nzfn, sheet = "Probable", skip = 3))
probable = probable %>% select(Date.of.report, Sex, Age.group, DHB, International.travel)
probable$DHB = factor(probable$DHB, levels = dhbnames) # will give warning and NA entry if not valid
probable$Age.group[probable$Age.group == "Unknown"] = "unknown"
probable$Age.group = factor(probable$Age.group, levels = agelevels)
probable$International.travel[is.na(probable$International.travel)] = "unknown"
probable$International.travel = factor(probable$International.travel)
probable$Sex[is.na(probable$Sex)] = "unknown"
probable$Sex = factor(tolower(probable$Sex))
######
#
# Access official ECDPC count data per country
# Load library
# Website and filename for European Centre for Disease Prevention and Control Covid-19 data
todaysdate = format(as.Date(Sys.time())-1, "%Y-%m-%d") # NZ is always ahead!
ecdpcurl = paste("https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide-", todaysdate, ".xlsx", sep = "")
ecdpcfn = rev(strsplit(ecdpcurl, "/")[[1]])[1]
# Download the dataset from the website to a local temporary file
GET(ecdpcurl, authenticate(":", ":", type = "ntlm"), write_disk(ecdpcfn, overwrite = TRUE))
# Read dataset
ecdpcdata = read_excel(ecdpcfn)
# Date object
# Have checked that Day/Month/Year is same as DateRep
ecdpcdata$dateRep = as.Date(ecdpcdata$dateRep, format = "%d/%m/%Y")
# Factors and replace "_" with " "
ecdpcdata$countriesAndTerritories = gsub("_",  " ", ecdpcdata$countriesAndTerritories)
ecdpcdata$countriesAndTerritories = factor(ecdpcdata$countriesAndTerritories)
ecdpcdata$geoId = factor(ecdpcdata$geoId)
ecdpcdata$countryterritoryCode = factor(ecdpcdata$countryterritoryCode)
nzdata = ecdpcdata[ecdpcdata$countriesAndTerritories == "New Zealand", ]
# Cumulative count (dates are reverse order in dataset)
nzdata$TotalCases = rev(cumsum(rev(nzdata$cases)))
nzdata$TotalDeaths = rev(cumsum(rev(nzdata$deaths)))
# Gives warning if MoH count of cases does not match ECDPC
if (nzdata$TotalCases[1] != dim(confirmed)[1]) {
warning(paste("MoH says", dim(confirmed)[1], "confirmed cases, but ECDPC says", nzdata$TotalCases[1],
"(sometimes ECDPC lags behind NZ by 1 day)", sep = " "))
}
if (nzdata$TotalCases[1] != (dim(confirmed)[1] + dim(probable)[1])) {
warning(paste("MoH says", dim(confirmed)[1] + dim(probable)[1], "confirmed and probable cases, but ECDPC says", nzdata$TotalCases[1],
"(sometimes ECDPC lags behind NZ by 1 day)", sep = " "))
}
# Seems that ECDPC is now back to showing only confirmed cases for NZ
######
#
# Access official NZ Ministry of Health data (*** daily summaries ***)
nzurl = "https://www.health.govt.nz/our-work/diseases-and-conditions/covid-19-novel-coronavirus/covid-19-current-cases"
# extract NZ covid-19 case data from MoH website
webpage = read_html(nzurl)
# Get the confirmed cases
alltables = html_nodes(webpage, "table")
alltables = html_table(alltables)
dailytable = alltables[[1]]
#DHBtable = alltables[[2]] # not useful as includes "probable" cases
nconfirmed = as.numeric(dailytable[1, 2])
newconfirmed = as.numeric(dailytable[1, 3])
ndeaths = as.numeric(dailytable[6, 2])
# Gives error if new count is not consistent with old data
if (nconfirmed != dim(confirmed)[1]) {
stop("Confirmed case count does not equal saily summary table")
}
# Keep ongoing record of summary data
write.csv(dailytable, paste("MoH_",nzdate,".csv", sep = ""), quote = FALSE, row.names = FALSE)
#######
#
# Adjust to same format as for Shiny app
######## MANUAL DATA CORRECTION (2 patients recorded as 28/3/20, actually recorded in official figures as 27/03/20)
confirmed$Date.of.report[1:7] = as.Date("30/03/2020", format = "%d/%m/%Y")
# Firstly group by date, region and gender and put in date order
nzshinydata = confirmed %>% group_by(Date.of.report, Sex, DHB) %>%
summarise(ncase = length(Date.of.report)) %>%
mutate(country = "new zealand", ndeath = 0) %>%
select(date = Date.of.report, ncase, ndeath, gender = Sex, area = DHB, country) %>%
ungroup()
# Deaths need manual input
nzshinydata = nzshinydata %>% add_row(date = "2020-03-28", ncase = 0, ndeath = 1, gender = "female",
area = "West Coast", country = "new zealand") %>%
group_by(date, gender, area, country) %>%
summarise(ncase = sum(ncase), ndeath = sum(ndeath)) %>%
select(date, ncase, ndeath, gender, area, country) %>%
ungroup() %>% arrange(date, area, gender)
nzshinydata = data.frame(nzshinydata)
######
shinydata = read.csv("coronaviz/data/corona_island.csv")
shinydata = data.frame(shinydata)
shinydata$date = as.Date(shinydata$date, format = "%d/%m/%Y")
shinydata$gender = as.character(shinydata$gender)
shinydata$area = as.character(shinydata$area)
shinydata$country = as.character(shinydata$country)
nzshinydata$gender = as.character(nzshinydata$gender)
nzshinydata$area = as.character(nzshinydata$area)
shinydata1 = rbind(shinydata, nzshinydata)
shinydata1$date = as.character(shinydata1$date, format = "%d/%m/%Y")
# # Save old datafile and create updated one
# file.rename("coronaviz-master (7)/coronaviz-master/data/corona_island_nz.csv",
#             "coronaviz-master (7)/coronaviz-master/data/corona_island_nz_old.csv")
write.csv(shinydata1, "coronaviz/data/corona_island_nz.csv", quote = FALSE, row.names = FALSE)
shiny::runApp('coronaviz')
