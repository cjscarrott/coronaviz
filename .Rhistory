county == "Louth" ~ 53.9252,
county == "Mayo" ~ 54.0153,
county == "Meath" ~ 53.6055,
county == "Monaghan" ~ 54.2492,
county == "Offaly" ~ 53.2357,
county == "Roscommon" ~ 53.6276,
county == "Sligo" ~ 54.2766,
county == "Tipperary" ~ 52.4738,
county == "Wexford" ~ 52.3369,
county == "Kerry" ~ 52.1545,
county == "Waterford" ~ 52.2593,
county == "Westmeath" ~ 53.5345,
county == "Wicklow" ~ 52.9808,
county == "Galway" ~ 53.2707,
county == "Limerick" ~ 52.6638,
county == "Cork" ~ 51.8985,
county == "Dublin" ~ 53.3498)) %>%
mutate(ncases = as.character(ncase),
ncases = ifelse(ncases == "< = 5","5",ncases)) %>%
mutate(ncases = as.numeric(ncases))
View(county)
labs <- lapply(seq(nrow(county)), function(i) {
paste0( '<p>', county[i, "ncase"],' cases </p><p>')
})
county %>%
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(lng = -8, lat = 53.5, zoom = 6) %>%
clearShapes() %>%
addCircleMarkers(lng= ~long,
lat= ~lat,
layerId = ~area,
radius = ~ncases/2,
label = lapply(labs, htmltools::HTML))
county %>%
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(lng = -8, lat = 53.5, zoom = 6) %>%
clearShapes() %>%
addCircleMarkers(lng= ~long,
lat= ~lat,
layerId = ~county,
radius = ~ncases/2,
label = lapply(labs, htmltools::HTML))
county %>%
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(lng = -8, lat = 53.5, zoom = ) %>%
clearShapes() %>%
addCircleMarkers(lng= ~long,
lat= ~lat,
layerId = ~county,
radius = ~ncase)
county %>%
leaflet() %>%
addTiles(
urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
) %>%
setView(lng = -8, lat = 53.5, zoom = 8) %>%
clearShapes() %>%
addCircleMarkers(lng= ~long,
lat= ~lat,
layerId = ~county,
radius = ~ncase)
runApp('coronaviz')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz')
runApp('coronaviz')
shiny::runApp('coronaviz')
?colorNumeric
pal <- colorNumeric("Reds")
runApp('coronaviz')
previewColors(colorNumeric("Blues", domain = NULL), sort(rexp(16)))
previewColors(colorNumeric("Red", domain = NULL), sort(rexp(16)))
previewColors(colorNumeric("Reds", domain = NULL), sort(rexp(16)))
runApp('coronaviz')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz')
runApp('coronaviz')
runApp('coronaviz')
runApp('coronaviz')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz')
runApp('coronaviz')
runApp('coronaviz')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz')
shiny::runApp('coronaviz')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz')
4.922+1.882
runApp('coronaviz')
runApp('coronaviz/mobileapp.R')
shiny::runApp('coronaviz')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz')
runApp('coronaviz')
runApp('coronaviz')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz')
shiny::runApp('coronaviz')
shiny::runApp('coronaviz')
runApp('coronaviz')
runApp('coronaviz')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz/mobileapp.R')
?theme
runApp('coronaviz/mobileapp.R')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz')
shiny::runApp('coronaviz')
shiny::runApp('coronaviz')
runApp('coronaviz/mobileapp.R')
?colorFactor
runApp('coronaviz/mobileapp.R')
runApp('coronaviz')
runApp('coronaviz/mobileapp.R')
?addCircleMarkers
runApp('coronaviz/mobileapp.R')
runApp('coronaviz')
runApp('coronaviz/mobileapp.R')
library(shiny); runApp('coronaviz/mobileapp.R')
runApp('coronaviz')
knitr::opts_chunk$set(echo = TRUE)
library(Stat2Data)
?`Stat2Data-package`
library(Stat2Data)
data("AudioVisual")
View(AudioVisual)
library(tidyverse)
AudioVisual %>%
group_by(Stimulus, Group) %>%
summarise(n=n(),mean=mean(ResponseTime),sd=sd(ResponseTime))
AudioVisual %>%
ggplot(aes(x=Group, y = ResponseTime, fill = Group)) + geom_boxplot() + facet_wrap(~Stimulus)
anova2 <- aov(ResponseTime ~ Stimulus + Group, data = AudioVisual)
summary(anova2)
AudioVisual %>%
group_by(Stimulus, Group) %>%
summarise(n=n(),mean=mean(ResponseTime),sd=sd(ResponseTime)) %>%
ggplot(aes(x=Group,y=mean,group=Stimulus,color=Stimulus)) + geom_line()
anova3 <- aov(ResponseTime ~ Stimulus * Group, data = AudioVisual)
summary(anova3)
AudioVisual$residuals <- anova3$residuals
ggplot(AudioVisual,aes(x=Group, y = residuals, fill = Group)) + geom_boxplot() + facet_wrap(~Stimulus)
ggplot(AudioVisual, aes(x=residuals)) + geom_histogram()
ggplot(AudioVisual, aes(sample=residuals)) + geom_qq() + geom_qq_line()
data("ChildSpeaks")
View(ChildSpeaks)
data("CrackerFiber")
View(CrackerFiber)
help("CrackerFiber")
View(CrackerFiber)
library(dplyr)
CrackerFiber %>% group_by(Fiber) %>% summarise(n = n(),
mean = mean(Calories),
sd = sd(Calories))
library(ggplot2)
ggplot(CrackerFiber, aes(x = Fiber, y = Calories, fill = Fiber)) + geom_boxplot()
anova1 <- aov(Calories ~ Fiber, data = CrackerFiber)
summary(anova1)
CrackerFiber$Res <- anova1$residuals
ggplot(CrackerFiber, aes(x=Fiber, y=Res)) + geom_point()
ggplot(CrackerFiber, aes(x=Res)) + geom_histogram()
ggplot(CrackerFiber, aes(sample=Res)) + geom_qq() + geom_qq_line()
pairwise.t.test(CrackerFiber$Calories, CrackerFiber$Fiber, p.adjust.method = "Bonferroni")
pairwise.t.test(CrackerFiber$Calories, CrackerFiber$Fiber, p.adjust.method = "bonferroni")
pairwise.t.test(CrackerFiber$Calories, CrackerFiber$Fiber)
?pairwise.t.test
knitr::opts_chunk$set(echo = TRUE)
library(Stat2Data)
data("Putts1")
library(tidyverse)
library(tidyverse)
Putts1 %>% group_by(Made) %>% summarise(n = n(),
mean = mean(Length),
sd = sd(Length))
Putts1 %>% group_by(Length) %>% summarise(n = n(),
prop = mean(Made))
ggplot(Putts1, aes(x = Made, y = Length, fill = Made)) + geom_boxplot()
ggplot(Putts1, aes(x = as.factor(Made), y = Length, fill = as.factor(Made))) + geom_boxplot()
View(Putts1)
model <- glm(Made ~ Length, data = Putts1, family = binomial(link = "logit"))
summary(model)
exp(-0.56614)
model2 <- glm(Made ~ as.factor(Length), data = Putts1, family = binomial(link = "logit"))
summary(model2)
coef(summary(model2))
coef(summary(model2))$Estimate
coef(summary(model2))[,1]
exp(coef(summary(model2))[,1])
?fisher.test
knitr::opts_chunk$set(echo = TRUE)
library(Stat2Data)
data("Putts1")
model <- glm(Made ~ Length, data = Putts1, family = binomial("logit"))
summary(model)
?summary.glm
logLik(model)
exp(cbind(coef(model), confint(model)))
knitr::opts_chunk$set(echo = TRUE)
library(Stat2Data)
data("Putts1")
model <- glm(Made ~ Length, data = Putts2, family = binomial(link = "logit"))
model <- glm(Made ~ Length, data = Putts1, family = binomial(link = "logit"))
summary(model)
exp(coef(model))
confint(model)
exp(confint(model))
exp(cbind(coef(model),confint(model)))
summary(model)
logLik(model)
summary(model)
model$null.deviance
model$deviance
model$null.deviance - model$deviance
pchisq(80.3, df = 1, lower.tail = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(Stat2Data)
data("ICU")
View(ICU)
model1 <- glm(Survive ~ Age, data = ICU, family = binomial(link="logit"))
summary(model1)
exp(-0.02754)
exp(-0.02754)
model2 <- glm(Survive ~ Age + SysBP, data = ICU, family = binomial(link="logit"))
summary(model2)
exp(0.0168)
summary(model2)
logLik(model1)
logLik(model2)
-2 * logLik(model1) - (-2* logLik(model2))
model1$deviance - model2$deviance
model1$deviance - model2$deviance ## quicker with R
pchisq(9.05, df = 1, lower.tail = FALSE)
qchisq(0.05, df = 1, lower.tail = FALSE)
model1$deviance - model2$deviance ## quicker with R
model3 <- glm(Survive ~ Age + SysBP + I(Age^2), data = ICU, family = binomial(link="logit"))
summary(model3)
model2$deviance - model3$deviance
pchisq(model2$deviance - model3$deviance, df = 1, lower.tail = FALSE)
shiny::runApp('coronaviz')
runApp('coronaviz')
runApp('coronaviz/mobileapp.R')
shiny::runApp('coronaviz')
library(shinyMobile)
?shinymobile
?f7Accordion
runApp('coronaviz/mobileapp.R')
runApp('coronaviz')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz/mobileapp.R')
shiny::runApp('coronaviz')
runApp('~/Desktop')
runApp('coronaviz')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz')
runApp('coronaviz')
shiny::runApp('coronaviz')
shiny::runApp('coronaviz')
runApp('coronaviz/mobileapp.R')
runApp('coronaviz/mobileapp.R')
library(shiny); runApp('coronaviz/mobileapp.R')
runApp('coronaviz')
library(Stat2Data)
library(shiny); runApp('coronaviz/mobileapp.R')
runApp('coronaviz')
runApp('coronaviz')
runApp('coronaviz')
data("ToothGrowth")
write.csv(ToothGrowth,row.names=FALSE,file="ToothGrowth.csv")
library(tidyverse)
library(rvest)
library(httr)
library(spData) # NZ regions
library(DHBins) # NZ DHB regions
######
#
# Access official NZ Ministry of Health data (individual patient level)
nzurl = "https://www.health.govt.nz/our-work/diseases-and-conditions/covid-19-novel-coronavirus/covid-19-current-cases/covid-19-current-cases-details"
# extract NZ covid-19 case data from MoH website
webpage = read_html(nzurl)
# Get the confirmed cases
alltables = html_nodes(webpage, "table")
alltables = html_table(alltables)
confirmed = alltables[[1]]
#probable = alltables[[2]] # Not available anymore
# Notes:
#  - locations are mixture of cities and regions (extra field to list DHB region only, using official names only)
#  - age ranges (20s onwards in decades decades, teens, child)
#  - privacy issue: case 139 has age listed as 64 (corrected below)
#  - gender is M or Male, F or Female (made consistent below)
#  - details to indicate community transmission
confirmed$Age[confirmed$Age == 64] = "60s"
confirmed$Gender = ifelse(confirmed$Gender == "Male", "male", confirmed$Gender)
confirmed$Gender = ifelse(confirmed$Gender == "M", "male", confirmed$Gender)
confirmed$Gender = ifelse(confirmed$Gender == "Female", "female", confirmed$Gender)
confirmed$Gender = ifelse(confirmed$Gender == "F", "female", confirmed$Gender)
dhbnames = sort(as.character(dhb_cars$dhb)) # can't find a better official source of NZ DHB names in R
dhbnames[dhbnames == "Hutt"] = "Hutt Valley" # incorrect in library
dhbnames[dhbnames == "Midcentral"] = "MidCentral"  # incorrect in library
confirmed$DHB[substr(confirmed$DHB, 1, 3) == "Haw"] = dhbnames[substr(dhbnames, 1, 3) == "Haw"]
confirmed$DHB[substr(confirmed$DHB, 1, 3) == "Cap"] = dhbnames[substr(dhbnames, 1, 3) == "Cap"]
confirmed$DHB[substr(confirmed$DHB, 1, 3) == "Nel"] = dhbnames[substr(dhbnames, 1, 3) == "Nel"]
confirmed$Location = confirmed$DHB
confirmed$DHB[confirmed$DHB == "Dunedin"] = "Southern"
confirmed$DHB[confirmed$DHB == "Wanaka"] = "Southern"
confirmed$DHB[confirmed$DHB == "Queenstown"] = "Southern"
confirmed$DHB[confirmed$DHB == "Hamilton"] = "Waikato"
confirmed$DHB[confirmed$DHB == "Waitaki"] = "Southern"
confirmed$DHB[confirmed$DHB == "Upper Hutt"] = "Hutt Valley"
confirmed$DHB[confirmed$DHB == "Manawatu"] = "MidCentral"
confirmed$DHB[confirmed$DHB == "Taupo"] = "Lakes"
confirmed$DHB[confirmed$DHB == "Southern DHB"] = "Southern"
confirmed$DHB[confirmed$DHB == "Rotorua"] = "Lakes"
confirmed$DHB[confirmed$DHB == "Invercargill"] = "Southern"
confirmed$DHB[confirmed$DHB == "Christchurch"] = "Canterbury"
confirmed$DHB[confirmed$DHB == "New Plymouth"] = "Taranaki"
confirmed$DHB[confirmed$DHB == "Kapiti Coast"] = "Capital and Coast"
confirmed$DHB = factor(confirmed$DHB, levels = dhbnames) # will give warning and NA entry if not valid
confirmed$Age = factor(confirmed$Age)
confirmed$Gender = factor(confirmed$Gender)
######
#
# Access official ECDPC count data per country
# Load library
# Website and filename for European Centre for Disease Prevention and Control Covid-19 data
ecdpcurl = "https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide.csv"
ecdpcfn = rev(strsplit(ecdpcurl, "/")[[1]])[1]
# Download the dataset from the website to a local temporary file
GET(ecdpcurl, authenticate(":", ":", type="ntlm"), write_disk(ecdpcfn, overwrite = TRUE))
# Read dataset
ecdpcdata = read.csv(ecdpcfn)
# Date object
# Have checked that Day/Month/Year is same as DateRep
ecdpcdata$DateRep = as.Date(ecdpcdata$DateRep, format = "%d/%m/%Y")
# Factors and replace "_" with " "
ecdpcdata$Countries.and.territories = gsub("_",  " ", ecdpcdata$Countries.and.territories)
ecdpcdata$Countries.and.territories = factor(ecdpcdata$Countries.and.territories)
ecdpcdata$GeoId = factor(ecdpcdata$GeoId)
nzdata = ecdpcdata[ecdpcdata$Countries.and.territories == "New Zealand", ]
# Cumulative count (dates are reverse order in dataset)
nzdata$TotalCases = rev(cumsum(rev(nzdata$Cases)))
nzdata$TotalDeaths = rev(cumsum(rev(nzdata$Deaths)))
# Gives warning if MoH count of cases does not match ECDPC
if (nzdata$TotalCases[1] != dim(confirmed)[1]) {
warning(paste("MoH says", dim(confirmed)[1], "confirmed cases, but ECDPC says", nzdata$TotalCases[1],
"(sometimes ECDPC lags behind NZ by 1 day)", sep = " "))
}
#######
#
# Add date to confirmed cases, presuming MoH lists the cases in day/time order
# ECDPC is sometimes lagging behind, presume difference is just one day lag
datesofar = with(nzdata, rep(DateRep, times = Cases)) # presume reverse chronological order
datesofar = c(datesofar, rep(max(nzdata$DateRep) + 1, dim(confirmed)[1] - length(datesofar)))
confirmed$Date = datesofar
#######
#
# Adjust to same format as for Shiny app
# Firstly group by date, region and gender and put in date order
nzshinydata = confirmed %>% group_by(Date, Gender, DHB) %>%
summarise(ncase = length(Date)) %>%
mutate(ndeath = 0) %>%
mutate(country = "new zealand") %>%
select(date = Date, ncase, ndeath, gender = Gender, area = DHB, country)
nzshinydata = data.frame(nzshinydata)
######
#
# Update Shiny datafile
shinydata = read.csv("coronaviz-master (2)/coronaviz-master/data/corona_island.csv")
shinydata = data.frame(shinydata)
shinydata$date = as.Date(shinydata$date, format = "%d/%m/%Y")
shinydata$gender = as.character(shinydata$gender)
shinydata$area = as.character(shinydata$area)
shinydata$country = as.character(shinydata$country)
nzshinydata$gender = as.character(nzshinydata$gender)
nzshinydata$area = as.character(nzshinydata$area)
shinydata1 = rbind(shinydata, nzshinydata)
shinydata1$date = as.character(shinydata1$date, format = "%d/%m/%Y")
write.csv(shinydata1, "coronaviz/data/corona_island_nz.csv", quote = FALSE, row.names = FALSE)
library(tidyverse)
library(rvest)
library(httr)
library(spData) # NZ regions
library(DHBins) # NZ DHB regions
######
#
# Access official NZ Ministry of Health data (individual patient level)
nzurl = "https://www.health.govt.nz/our-work/diseases-and-conditions/covid-19-novel-coronavirus/covid-19-current-cases/covid-19-current-cases-details"
# extract NZ covid-19 case data from MoH website
webpage = read_html(nzurl)
# Get the confirmed cases
alltables = html_nodes(webpage, "table")
alltables = html_table(alltables)
confirmed = alltables[[1]]
#probable = alltables[[2]] # Not available anymore
# Notes:
#  - locations are mixture of cities and regions (extra field to list DHB region only, using official names only)
#  - age ranges (20s onwards in decades decades, teens, child)
#  - privacy issue: case 139 has age listed as 64 (corrected below)
#  - gender is M or Male, F or Female (made consistent below)
#  - details to indicate community transmission
confirmed$Age[confirmed$Age == 64] = "60s"
confirmed$Gender = ifelse(confirmed$Gender == "Male", "male", confirmed$Gender)
confirmed$Gender = ifelse(confirmed$Gender == "M", "male", confirmed$Gender)
confirmed$Gender = ifelse(confirmed$Gender == "Female", "female", confirmed$Gender)
confirmed$Gender = ifelse(confirmed$Gender == "F", "female", confirmed$Gender)
dhbnames = sort(as.character(dhb_cars$dhb)) # can't find a better official source of NZ DHB names in R
dhbnames[dhbnames == "Hutt"] = "Hutt Valley" # incorrect in library
dhbnames[dhbnames == "Midcentral"] = "MidCentral"  # incorrect in library
confirmed$DHB[substr(confirmed$DHB, 1, 3) == "Haw"] = dhbnames[substr(dhbnames, 1, 3) == "Haw"]
confirmed$DHB[substr(confirmed$DHB, 1, 3) == "Cap"] = dhbnames[substr(dhbnames, 1, 3) == "Cap"]
confirmed$DHB[substr(confirmed$DHB, 1, 3) == "Nel"] = dhbnames[substr(dhbnames, 1, 3) == "Nel"]
confirmed$Location = confirmed$DHB
confirmed$DHB[confirmed$DHB == "Dunedin"] = "Southern"
confirmed$DHB[confirmed$DHB == "Wanaka"] = "Southern"
confirmed$DHB[confirmed$DHB == "Queenstown"] = "Southern"
confirmed$DHB[confirmed$DHB == "Hamilton"] = "Waikato"
confirmed$DHB[confirmed$DHB == "Waitaki"] = "Southern"
confirmed$DHB[confirmed$DHB == "Upper Hutt"] = "Hutt Valley"
confirmed$DHB[confirmed$DHB == "Manawatu"] = "MidCentral"
confirmed$DHB[confirmed$DHB == "Taupo"] = "Lakes"
confirmed$DHB[confirmed$DHB == "Southern DHB"] = "Southern"
confirmed$DHB[confirmed$DHB == "Rotorua"] = "Lakes"
confirmed$DHB[confirmed$DHB == "Invercargill"] = "Southern"
confirmed$DHB[confirmed$DHB == "Christchurch"] = "Canterbury"
confirmed$DHB[confirmed$DHB == "New Plymouth"] = "Taranaki"
confirmed$DHB[confirmed$DHB == "Kapiti Coast"] = "Capital and Coast"
confirmed$DHB = factor(confirmed$DHB, levels = dhbnames) # will give warning and NA entry if not valid
confirmed$Age = factor(confirmed$Age)
confirmed$Gender = factor(confirmed$Gender)
######
#
# Access official ECDPC count data per country
# Load library
# Website and filename for European Centre for Disease Prevention and Control Covid-19 data
ecdpcurl = "https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide.csv"
ecdpcfn = rev(strsplit(ecdpcurl, "/")[[1]])[1]
# Download the dataset from the website to a local temporary file
GET(ecdpcurl, authenticate(":", ":", type="ntlm"), write_disk(ecdpcfn, overwrite = TRUE))
# Read dataset
ecdpcdata = read.csv(ecdpcfn)
# Date object
# Have checked that Day/Month/Year is same as DateRep
ecdpcdata$DateRep = as.Date(ecdpcdata$DateRep, format = "%d/%m/%Y")
# Factors and replace "_" with " "
ecdpcdata$Countries.and.territories = gsub("_",  " ", ecdpcdata$Countries.and.territories)
ecdpcdata$Countries.and.territories = factor(ecdpcdata$Countries.and.territories)
ecdpcdata$GeoId = factor(ecdpcdata$GeoId)
nzdata = ecdpcdata[ecdpcdata$Countries.and.territories == "New Zealand", ]
# Cumulative count (dates are reverse order in dataset)
nzdata$TotalCases = rev(cumsum(rev(nzdata$Cases)))
nzdata$TotalDeaths = rev(cumsum(rev(nzdata$Deaths)))
# Gives warning if MoH count of cases does not match ECDPC
if (nzdata$TotalCases[1] != dim(confirmed)[1]) {
warning(paste("MoH says", dim(confirmed)[1], "confirmed cases, but ECDPC says", nzdata$TotalCases[1],
"(sometimes ECDPC lags behind NZ by 1 day)", sep = " "))
}
#######
#
# Add date to confirmed cases, presuming MoH lists the cases in day/time order
# ECDPC is sometimes lagging behind, presume difference is just one day lag
datesofar = with(nzdata, rep(DateRep, times = Cases)) # presume reverse chronological order
datesofar = c(datesofar, rep(max(nzdata$DateRep) + 1, dim(confirmed)[1] - length(datesofar)))
confirmed$Date = datesofar
#######
#
# Adjust to same format as for Shiny app
# Firstly group by date, region and gender and put in date order
nzshinydata = confirmed %>% group_by(Date, Gender, DHB) %>%
summarise(ncase = length(Date)) %>%
mutate(ndeath = 0) %>%
mutate(country = "new zealand") %>%
select(date = Date, ncase, ndeath, gender = Gender, area = DHB, country)
nzshinydata = data.frame(nzshinydata)
######
#
# Update Shiny datafile
shinydata = read.csv("coronaviz/data/corona_island.csv")
shinydata = data.frame(shinydata)
shinydata$date = as.Date(shinydata$date, format = "%d/%m/%Y")
shinydata$gender = as.character(shinydata$gender)
shinydata$area = as.character(shinydata$area)
shinydata$country = as.character(shinydata$country)
nzshinydata$gender = as.character(nzshinydata$gender)
nzshinydata$area = as.character(nzshinydata$area)
shinydata1 = rbind(shinydata, nzshinydata)
shinydata1$date = as.character(shinydata1$date, format = "%d/%m/%Y")
write.csv(shinydata1, "coronaviz/data/corona_island_nz.csv", quote = FALSE, row.names = FALSE)
library(shiny); runApp('coronaviz/app2.R')
